
/*!
 * @file
 * @brief ≈‰÷√–≈œ¢
 *
 * @author atom
 * @date 2017-01-24
 * @version 0.1.0
 * @note 
 */


#ifndef CELL_CONFIG_HPP
#define CELL_CONFIG_HPP

 // this header must be generated by the build system (may be empty)
#include "cell/detail/build_config.hpp"

// Platform-specific adjustments.
#define CELL_CACHE_LINE_SIZE 64

// Config parameters defined by the build system (usually CMake):
//
// CELL_ENABLE_RUNTIME_CHECKS:
//   - check requirements at runtime
//
// CELL_LOG_LEVEL:
//   - denotes the amount of logging, ranging from error messages only (0)
//     to complete traces (4)

/// Denotes version of CELL in the format {MAJOR}{MINOR}{PATCH},
/// whereas each number is a two-digit decimal number without
/// leading zeros (e.g. 900 is version 0.9.0).
#define CELL_VERSION 1000

/// Defined to the major version number of CELL.
#define CELL_MAJOR_VERSION (CELL_VERSION / 10000)

/// Defined to the minor version number of CELL.
#define CELL_MINOR_VERSION ((CELL_VERSION / 100) % 100)

/// Defined to the patch version number of CELL.
#define CELL_PATCH_VERSION (CELL_VERSION % 100)

// This compiler-specific block defines:
// - CELL_DEPRECATED to annotate deprecated functions
// - CELL_PUSH_WARNINGS/CELL_POP_WARNINGS to surround "noisy" header includes
// - CELL_ANNOTATE_FALLTHROUGH to suppress warnings in switch/case statements
// - CELL_COMPILER_VERSION to retrieve the compiler version in CELL_VERSION format
// - One of the following:
//   + CELL_CLANG
//   + CELL_GCC
//   + CELL_MSVC

// sets CELL_DEPRECATED, CELL_ANNOTATE_FALLTHROUGH,
// CELL_PUSH_WARNINGS and CELL_POP_WARNINGS
#if defined(__clang__)
#  define CELL_CLANG
#  define CELL_DEPRECATED __attribute__((__deprecated__))
#  define CELL_DEPRECATED_MSG(msg) __attribute__((__deprecated__(msg)))
#  define CELL_PUSH_WARNINGS                                                    \
    _Pragma("clang diagnostic push")                                           \
    _Pragma("clang diagnostic ignored \"-Wall\"")                              \
    _Pragma("clang diagnostic ignored \"-Wextra\"")                            \
    _Pragma("clang diagnostic ignored \"-Werror\"")                            \
    _Pragma("clang diagnostic ignored \"-Wundef\"")                            \
    _Pragma("clang diagnostic ignored \"-Wshadow\"")                           \
    _Pragma("clang diagnostic ignored \"-Wdeprecated\"")                       \
    _Pragma("clang diagnostic ignored \"-Wextra-semi\"")                       \
    _Pragma("clang diagnostic ignored \"-Wconversion\"")                       \
    _Pragma("clang diagnostic ignored \"-Wcast-align\"")                       \
    _Pragma("clang diagnostic ignored \"-Wfloat-equal\"")                      \
    _Pragma("clang diagnostic ignored \"-Wswitch-enum\"")                      \
    _Pragma("clang diagnostic ignored \"-Wweak-vtables\"")                     \
    _Pragma("clang diagnostic ignored \"-Wdocumentation\"")                    \
    _Pragma("clang diagnostic ignored \"-Wold-style-cast\"")                   \
    _Pragma("clang diagnostic ignored \"-Wsign-conversion\"")                  \
    _Pragma("clang diagnostic ignored \"-Wshorten-64-to-32\"")                 \
    _Pragma("clang diagnostic ignored \"-Wunreachable-code\"")                 \
    _Pragma("clang diagnostic ignored \"-Wdouble-promotion\"")                 \
    _Pragma("clang diagnostic ignored \"-Wc++14-extensions\"")                 \
    _Pragma("clang diagnostic ignored \"-Wunused-parameter\"")                 \
    _Pragma("clang diagnostic ignored \"-Wnested-anon-types\"")                \
    _Pragma("clang diagnostic ignored \"-Wreserved-id-macro\"")                \
    _Pragma("clang diagnostic ignored \"-Wconstant-conversion\"")              \
    _Pragma("clang diagnostic ignored \"-Wimplicit-fallthrough\"")             \
    _Pragma("clang diagnostic ignored \"-Wused-but-marked-unused\"")           \
    _Pragma("clang diagnostic ignored \"-Wdisabled-macro-expansion\"")
#  define CELL_PUSH_NON_VIRTUAL_DTOR_WARNING                                    \
    _Pragma("clang diagnostic push")                                           \
    _Pragma("clang diagnostic ignored \"-Wnon-virtual-dtor\"")
#  define CELL_POP_WARNINGS                                                     \
    _Pragma("clang diagnostic pop")
#  define CELL_ANNOTATE_FALLTHROUGH [[clang::fallthrough]]
#  define CELL_COMPILER_VERSION                                                 \
    (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)
#elif defined(__GNUC__)
#  define CELL_GCC
#  define CELL_DEPRECATED __attribute__((__deprecated__))
#  define CELL_DEPRECATED_MSG(msg) __attribute__((__deprecated__(msg)))
#  define CELL_PUSH_WARNINGS
    _Pragma("GCC diagnostic push")                                             \
    _Pragma("GCC diagnostic ignored \"-Wshadow\"")                             \
    _Pragma("GCC diagnostic ignored \"-Wpragmas\"")                            \
    _Pragma("GCC diagnostic ignored \"-Wpedantic\"")                           \
    _Pragma("GCC diagnostic ignored \"-Wcast-qual\"")                          \
    _Pragma("GCC diagnostic ignored \"-Wconversion\"")                         \
    _Pragma("GCC diagnostic ignored \"-Wfloat-equal\"")                        \
    _Pragma("GCC diagnostic ignored \"-Wc++14-extensions\"")
#  define CELL_PUSH_NON_VIRTUAL_DTOR_WARNING                                    \
    _Pragma("GCC diagnostic push")                                             \
    _Pragma("GCC diagnostic ignored \"-Wnon-virtual-dtor\"")
#  define CELL_POP_WARNINGS                                                     \
    _Pragma("GCC diagnostic pop")
#  define CELL_ANNOTATE_FALLTHROUGH static_cast<void>(0)
#  define CELL_COMPILER_VERSION                                                 \
     (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#elif defined(_MSC_VER)
#  define CELL_MSVC
#  define CELL_DEPRECATED
#  define CELL_DEPRECATED_MSG(msg)
#  define CELL_PUSH_WARNINGS
#  define CELL_PUSH_NON_VIRTUAL_DTOR_WARNING
#  define CELL_POP_WARNINGS
#  define CELL_ANNOTATE_FALLTHROUGH static_cast<void>(0)
#  define CELL_COMPILER_VERSION _MSC_FULL_VER
#  pragma warning( disable : 4624 )
#  pragma warning( disable : 4800 )
#  pragma warning( disable : 4503 )
#  ifndef NOMINMAX
#    define NOMINMAX
#  endif // NOMINMAX
#else
#  define CELL_DEPRECATED
#  define CELL_PUSH_WARNINGS
#  define CELL_POP_WARNINGS
#  define CELL_ANNOTATE_FALLTHROUGH static_cast<void>(0)
#endif

// This OS-specific block defines one of the following:
// - CELL_MACOS
// - CELL_LINUX
// - CELL_BSD
// - CELL_WINDOWS
// It also defines CELL_POSIX for POSIX-compatible systems
#if defined(__APPLE__)
#  include "TargetConditionals.h"
#  if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
#    define CELL_IOS
#  else
#    define CELL_MACOS
#    if defined(CELL_GCC) && !defined(_GLIBCXX_HAS_GTHREADS)
#      define _GLIBCXX_HAS_GTHREADS
#    endif
#  endif
#elif defined(__ANDROID__)
#  define CELL_ANDROID
#elif defined(__linux__)
#  define CELL_LINUX
#  include <linux/version.h>
#  if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,16)
#    define CELL_POLL_IMPL
#  endif
#elif defined(__FreeBSD__)
#  define CELL_BSD
#elif defined(__CYGWIN__)
#  define CELL_CYGWIN
#elif defined(WIN32) || defined(_WIN32)
#  define CELL_WINDOWS
#else
#  error Platform and/or compiler not supportet
#endif
#if defined(CELL_MACOS) || defined(CELL_LINUX) || defined(CELL_BSD) || defined(CELL_CYGWIN)
#  define CELL_POSIX
#endif

#include <cstdio>
#include <cstdlib>

// Optionally enable CELL_ASSERT
#ifndef CELL_ENABLE_RUNTIME_CHECKS
# define CELL_ASSERT(unused) static_cast<void>(0)
#elif defined(CELL_WINDOWS) || defined(CELL_BSD)
# define CELL_ASSERT(stmt)                                                      \
  if (static_cast<bool>(stmt) == false) {                                      \
    printf("%s:%u: requirement failed '%s'\n", __FILE__, __LINE__, #stmt);     \
    ::abort();                                                                 \
  } static_cast<void>(0)
#else // defined(CELL_LINUX) || defined(CELL_MACOS)
# include <execinfo.h>
# define CELL_ASSERT(stmt)                                                      \
  if (static_cast<bool>(stmt) == false) {                                      \
    printf("%s:%u: requirement failed '%s'\n", __FILE__, __LINE__, #stmt);     \
    void* array[20];                                                           \
    auto CELL_bt_size = ::backtrace(array, 20);                                 \
    ::backtrace_symbols_fd(array, CELL_bt_size, 2);                             \
    ::abort();                                                                 \
  } static_cast<void>(0)
#endif

// Convenience macros.
#define CELL_IGNORE_UNUSED(x) static_cast<void>(x)

#define CELL_CRITICAL(error)                                                    \
  do {                                                                         \
    fprintf(stderr, "[FATAL] %s:%u: critical error: '%s'\n",                   \
            __FILE__, __LINE__, error);                                        \
    ::abort();                                                                 \
  } while (false)

#ifdef CELL_NO_EXCEPTIONS
# define CELL_RAISE_ERROR(msg)                                                  \
  do { std::string str = msg; CELL_CRITICAL(str.c_str()); } while (true)
#else // CELL_NO_EXCEPTIONS
# define CELL_RAISE_ERROR(msg)                                                  \
  throw std::runtime_error(msg)
#endif // CELL_NO_EXCEPTIONS


#endif // CELL_CONFIG_HPP